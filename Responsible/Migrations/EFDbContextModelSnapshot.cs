// <auto-generated />
using HELP.BLL.EntityFrameworkCore;
using HELP.GlobalFile.Global;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HELP.UI.Responsible.Migrations
{
    [DbContext(typeof(EFDbContext))]
    partial class EFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("HELP.BLL.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Floor");

                    b.Property<int>("ProblemId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Contact", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Other");

                    b.Property<string>("QQ");

                    b.Property<string>("Telephone");

                    b.Property<string>("WeChat");

                    b.HasKey("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Balance");

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("UserId");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Reward");

                    b.Property<int?>("RewardBestId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("RewardBestId");

                    b.HasIndex("UserId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("HELP.BLL.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Creditpoints");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Comment", b =>
                {
                    b.HasOne("HELP.BLL.Entity.Problem")
                        .WithMany("Commnets")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HELP.BLL.Entity.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Contact", b =>
                {
                    b.HasOne("HELP.BLL.Entity.User", "User")
                        .WithOne("contact")
                        .HasForeignKey("HELP.BLL.Entity.Contact", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HELP.BLL.Entity.Credit", b =>
                {
                    b.HasOne("HELP.BLL.Entity.User", "User")
                        .WithMany("CreditHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HELP.BLL.Entity.Problem", b =>
                {
                    b.HasOne("HELP.BLL.Entity.Comment", "RewardBest")
                        .WithMany()
                        .HasForeignKey("RewardBestId");

                    b.HasOne("HELP.BLL.Entity.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
